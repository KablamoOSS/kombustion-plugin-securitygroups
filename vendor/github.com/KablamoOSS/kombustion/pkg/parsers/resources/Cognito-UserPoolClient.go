package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// CognitoUserPoolClient Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
type CognitoUserPoolClient struct {
	Type       string                          `yaml:"Type"`
	Properties CognitoUserPoolClientProperties `yaml:"Properties"`
	Condition  interface{}                     `yaml:"Condition,omitempty"`
	Metadata   interface{}                     `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                     `yaml:"DependsOn,omitempty"`
}

// CognitoUserPoolClient Properties
type CognitoUserPoolClientProperties struct {
	ClientName           interface{} `yaml:"ClientName,omitempty"`
	GenerateSecret       interface{} `yaml:"GenerateSecret,omitempty"`
	RefreshTokenValidity interface{} `yaml:"RefreshTokenValidity,omitempty"`
	UserPoolId           interface{} `yaml:"UserPoolId"`
	ExplicitAuthFlows    interface{} `yaml:"ExplicitAuthFlows,omitempty"`
	ReadAttributes       interface{} `yaml:"ReadAttributes,omitempty"`
	WriteAttributes      interface{} `yaml:"WriteAttributes,omitempty"`
}

// NewCognitoUserPoolClient constructor creates a new CognitoUserPoolClient
func NewCognitoUserPoolClient(properties CognitoUserPoolClientProperties, deps ...interface{}) CognitoUserPoolClient {
	return CognitoUserPoolClient{
		Type:       "AWS::Cognito::UserPoolClient",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseCognitoUserPoolClient parses CognitoUserPoolClient
func ParseCognitoUserPoolClient(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource CognitoUserPoolClient
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseCognitoUserPoolClient validator
func (resource CognitoUserPoolClient) Validate() []error {
	return resource.Properties.Validate()
}

// ParseCognitoUserPoolClientProperties validator
func (resource CognitoUserPoolClientProperties) Validate() []error {
	errors := []error{}
	if resource.UserPoolId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'UserPoolId'"))
	}
	return errors
}
