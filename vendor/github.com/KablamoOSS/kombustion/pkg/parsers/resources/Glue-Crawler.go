package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// GlueCrawler Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-crawler.html
type GlueCrawler struct {
	Type       string                `yaml:"Type"`
	Properties GlueCrawlerProperties `yaml:"Properties"`
	Condition  interface{}           `yaml:"Condition,omitempty"`
	Metadata   interface{}           `yaml:"Metadata,omitempty"`
	DependsOn  interface{}           `yaml:"DependsOn,omitempty"`
}

// GlueCrawler Properties
type GlueCrawlerProperties struct {
	DatabaseName       interface{}                           `yaml:"DatabaseName"`
	Description        interface{}                           `yaml:"Description,omitempty"`
	Name               interface{}                           `yaml:"Name,omitempty"`
	Role               interface{}                           `yaml:"Role"`
	TablePrefix        interface{}                           `yaml:"TablePrefix,omitempty"`
	Targets            *properties.CrawlerTargets            `yaml:"Targets"`
	SchemaChangePolicy *properties.CrawlerSchemaChangePolicy `yaml:"SchemaChangePolicy,omitempty"`
	Schedule           *properties.CrawlerSchedule           `yaml:"Schedule,omitempty"`
	Classifiers        interface{}                           `yaml:"Classifiers,omitempty"`
}

// NewGlueCrawler constructor creates a new GlueCrawler
func NewGlueCrawler(properties GlueCrawlerProperties, deps ...interface{}) GlueCrawler {
	return GlueCrawler{
		Type:       "AWS::Glue::Crawler",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGlueCrawler parses GlueCrawler
func ParseGlueCrawler(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource GlueCrawler
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseGlueCrawler validator
func (resource GlueCrawler) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGlueCrawlerProperties validator
func (resource GlueCrawlerProperties) Validate() []error {
	errors := []error{}
	if resource.DatabaseName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DatabaseName'"))
	}
	if resource.Role == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Role'"))
	}
	if resource.Targets == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Targets'"))
	} else {
		errors = append(errors, resource.Targets.Validate()...)
	}
	return errors
}
