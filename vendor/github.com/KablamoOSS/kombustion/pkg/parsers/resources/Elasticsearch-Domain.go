package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ElasticsearchDomain Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticsearch-domain.html
type ElasticsearchDomain struct {
	Type       string                        `yaml:"Type"`
	Properties ElasticsearchDomainProperties `yaml:"Properties"`
	Condition  interface{}                   `yaml:"Condition,omitempty"`
	Metadata   interface{}                   `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                   `yaml:"DependsOn,omitempty"`
}

// ElasticsearchDomain Properties
type ElasticsearchDomainProperties struct {
	AccessPolicies             interface{}                                  `yaml:"AccessPolicies,omitempty"`
	DomainName                 interface{}                                  `yaml:"DomainName,omitempty"`
	ElasticsearchVersion       interface{}                                  `yaml:"ElasticsearchVersion,omitempty"`
	VPCOptions                 *properties.DomainVPCOptions                 `yaml:"VPCOptions,omitempty"`
	SnapshotOptions            *properties.DomainSnapshotOptions            `yaml:"SnapshotOptions,omitempty"`
	AdvancedOptions            interface{}                                  `yaml:"AdvancedOptions,omitempty"`
	Tags                       interface{}                                  `yaml:"Tags,omitempty"`
	EncryptionAtRestOptions    *properties.DomainEncryptionAtRestOptions    `yaml:"EncryptionAtRestOptions,omitempty"`
	ElasticsearchClusterConfig *properties.DomainElasticsearchClusterConfig `yaml:"ElasticsearchClusterConfig,omitempty"`
	EBSOptions                 *properties.DomainEBSOptions                 `yaml:"EBSOptions,omitempty"`
}

// NewElasticsearchDomain constructor creates a new ElasticsearchDomain
func NewElasticsearchDomain(properties ElasticsearchDomainProperties, deps ...interface{}) ElasticsearchDomain {
	return ElasticsearchDomain{
		Type:       "AWS::Elasticsearch::Domain",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseElasticsearchDomain parses ElasticsearchDomain
func ParseElasticsearchDomain(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ElasticsearchDomain
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseElasticsearchDomain validator
func (resource ElasticsearchDomain) Validate() []error {
	return resource.Properties.Validate()
}

// ParseElasticsearchDomainProperties validator
func (resource ElasticsearchDomainProperties) Validate() []error {
	errors := []error{}
	return errors
}
