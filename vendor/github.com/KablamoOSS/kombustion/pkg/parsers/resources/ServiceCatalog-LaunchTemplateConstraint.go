package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ServiceCatalogLaunchTemplateConstraint Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-launchtemplateconstraint.html
type ServiceCatalogLaunchTemplateConstraint struct {
	Type       string                                           `yaml:"Type"`
	Properties ServiceCatalogLaunchTemplateConstraintProperties `yaml:"Properties"`
	Condition  interface{}                                      `yaml:"Condition,omitempty"`
	Metadata   interface{}                                      `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                                      `yaml:"DependsOn,omitempty"`
}

// ServiceCatalogLaunchTemplateConstraint Properties
type ServiceCatalogLaunchTemplateConstraintProperties struct {
	AcceptLanguage interface{} `yaml:"AcceptLanguage,omitempty"`
	Description    interface{} `yaml:"Description,omitempty"`
	PortfolioId    interface{} `yaml:"PortfolioId"`
	ProductId      interface{} `yaml:"ProductId"`
	Rules          interface{} `yaml:"Rules"`
}

// NewServiceCatalogLaunchTemplateConstraint constructor creates a new ServiceCatalogLaunchTemplateConstraint
func NewServiceCatalogLaunchTemplateConstraint(properties ServiceCatalogLaunchTemplateConstraintProperties, deps ...interface{}) ServiceCatalogLaunchTemplateConstraint {
	return ServiceCatalogLaunchTemplateConstraint{
		Type:       "AWS::ServiceCatalog::LaunchTemplateConstraint",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseServiceCatalogLaunchTemplateConstraint parses ServiceCatalogLaunchTemplateConstraint
func ParseServiceCatalogLaunchTemplateConstraint(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ServiceCatalogLaunchTemplateConstraint
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseServiceCatalogLaunchTemplateConstraint validator
func (resource ServiceCatalogLaunchTemplateConstraint) Validate() []error {
	return resource.Properties.Validate()
}

// ParseServiceCatalogLaunchTemplateConstraintProperties validator
func (resource ServiceCatalogLaunchTemplateConstraintProperties) Validate() []error {
	errors := []error{}
	if resource.PortfolioId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'PortfolioId'"))
	}
	if resource.ProductId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ProductId'"))
	}
	if resource.Rules == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Rules'"))
	}
	return errors
}
