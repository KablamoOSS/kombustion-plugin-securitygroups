package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// EventsRule Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html
type EventsRule struct {
	Type       string               `yaml:"Type"`
	Properties EventsRuleProperties `yaml:"Properties"`
	Condition  interface{}          `yaml:"Condition,omitempty"`
	Metadata   interface{}          `yaml:"Metadata,omitempty"`
	DependsOn  interface{}          `yaml:"DependsOn,omitempty"`
}

// EventsRule Properties
type EventsRuleProperties struct {
	Description        interface{} `yaml:"Description,omitempty"`
	EventPattern       interface{} `yaml:"EventPattern,omitempty"`
	Name               interface{} `yaml:"Name,omitempty"`
	RoleArn            interface{} `yaml:"RoleArn,omitempty"`
	ScheduleExpression interface{} `yaml:"ScheduleExpression,omitempty"`
	State              interface{} `yaml:"State,omitempty"`
	Targets            interface{} `yaml:"Targets,omitempty"`
}

// NewEventsRule constructor creates a new EventsRule
func NewEventsRule(properties EventsRuleProperties, deps ...interface{}) EventsRule {
	return EventsRule{
		Type:       "AWS::Events::Rule",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEventsRule parses EventsRule
func ParseEventsRule(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource EventsRule
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseEventsRule validator
func (resource EventsRule) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEventsRuleProperties validator
func (resource EventsRuleProperties) Validate() []error {
	errors := []error{}
	return errors
}
