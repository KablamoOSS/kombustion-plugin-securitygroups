package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// KMSKey Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-key.html
type KMSKey struct {
	Type       string           `yaml:"Type"`
	Properties KMSKeyProperties `yaml:"Properties"`
	Condition  interface{}      `yaml:"Condition,omitempty"`
	Metadata   interface{}      `yaml:"Metadata,omitempty"`
	DependsOn  interface{}      `yaml:"DependsOn,omitempty"`
}

// KMSKey Properties
type KMSKeyProperties struct {
	Description       interface{} `yaml:"Description,omitempty"`
	EnableKeyRotation interface{} `yaml:"EnableKeyRotation,omitempty"`
	Enabled           interface{} `yaml:"Enabled,omitempty"`
	KeyPolicy         interface{} `yaml:"KeyPolicy"`
	KeyUsage          interface{} `yaml:"KeyUsage,omitempty"`
	Tags              interface{} `yaml:"Tags,omitempty"`
}

// NewKMSKey constructor creates a new KMSKey
func NewKMSKey(properties KMSKeyProperties, deps ...interface{}) KMSKey {
	return KMSKey{
		Type:       "AWS::KMS::Key",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseKMSKey parses KMSKey
func ParseKMSKey(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource KMSKey
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseKMSKey validator
func (resource KMSKey) Validate() []error {
	return resource.Properties.Validate()
}

// ParseKMSKeyProperties validator
func (resource KMSKeyProperties) Validate() []error {
	errors := []error{}
	if resource.KeyPolicy == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'KeyPolicy'"))
	}
	return errors
}
