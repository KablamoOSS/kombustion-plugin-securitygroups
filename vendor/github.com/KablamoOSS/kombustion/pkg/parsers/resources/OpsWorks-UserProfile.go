package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// OpsWorksUserProfile Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-userprofile.html
type OpsWorksUserProfile struct {
	Type       string                        `yaml:"Type"`
	Properties OpsWorksUserProfileProperties `yaml:"Properties"`
	Condition  interface{}                   `yaml:"Condition,omitempty"`
	Metadata   interface{}                   `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                   `yaml:"DependsOn,omitempty"`
}

// OpsWorksUserProfile Properties
type OpsWorksUserProfileProperties struct {
	AllowSelfManagement interface{} `yaml:"AllowSelfManagement,omitempty"`
	IamUserArn          interface{} `yaml:"IamUserArn"`
	SshPublicKey        interface{} `yaml:"SshPublicKey,omitempty"`
	SshUsername         interface{} `yaml:"SshUsername,omitempty"`
}

// NewOpsWorksUserProfile constructor creates a new OpsWorksUserProfile
func NewOpsWorksUserProfile(properties OpsWorksUserProfileProperties, deps ...interface{}) OpsWorksUserProfile {
	return OpsWorksUserProfile{
		Type:       "AWS::OpsWorks::UserProfile",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseOpsWorksUserProfile parses OpsWorksUserProfile
func ParseOpsWorksUserProfile(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource OpsWorksUserProfile
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseOpsWorksUserProfile validator
func (resource OpsWorksUserProfile) Validate() []error {
	return resource.Properties.Validate()
}

// ParseOpsWorksUserProfileProperties validator
func (resource OpsWorksUserProfileProperties) Validate() []error {
	errors := []error{}
	if resource.IamUserArn == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'IamUserArn'"))
	}
	return errors
}
