package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ECSTaskDefinition Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
type ECSTaskDefinition struct {
	Type       string                      `yaml:"Type"`
	Properties ECSTaskDefinitionProperties `yaml:"Properties"`
	Condition  interface{}                 `yaml:"Condition,omitempty"`
	Metadata   interface{}                 `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                 `yaml:"DependsOn,omitempty"`
}

// ECSTaskDefinition Properties
type ECSTaskDefinitionProperties struct {
	Cpu                     interface{} `yaml:"Cpu,omitempty"`
	ExecutionRoleArn        interface{} `yaml:"ExecutionRoleArn,omitempty"`
	Family                  interface{} `yaml:"Family,omitempty"`
	Memory                  interface{} `yaml:"Memory,omitempty"`
	NetworkMode             interface{} `yaml:"NetworkMode,omitempty"`
	TaskRoleArn             interface{} `yaml:"TaskRoleArn,omitempty"`
	ContainerDefinitions    interface{} `yaml:"ContainerDefinitions,omitempty"`
	PlacementConstraints    interface{} `yaml:"PlacementConstraints,omitempty"`
	RequiresCompatibilities interface{} `yaml:"RequiresCompatibilities,omitempty"`
	Volumes                 interface{} `yaml:"Volumes,omitempty"`
}

// NewECSTaskDefinition constructor creates a new ECSTaskDefinition
func NewECSTaskDefinition(properties ECSTaskDefinitionProperties, deps ...interface{}) ECSTaskDefinition {
	return ECSTaskDefinition{
		Type:       "AWS::ECS::TaskDefinition",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseECSTaskDefinition parses ECSTaskDefinition
func ParseECSTaskDefinition(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ECSTaskDefinition
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseECSTaskDefinition validator
func (resource ECSTaskDefinition) Validate() []error {
	return resource.Properties.Validate()
}

// ParseECSTaskDefinitionProperties validator
func (resource ECSTaskDefinitionProperties) Validate() []error {
	errors := []error{}
	return errors
}
