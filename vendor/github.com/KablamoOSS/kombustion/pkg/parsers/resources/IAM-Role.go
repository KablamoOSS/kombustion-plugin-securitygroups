package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// IAMRole Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
type IAMRole struct {
	Type       string            `yaml:"Type"`
	Properties IAMRoleProperties `yaml:"Properties"`
	Condition  interface{}       `yaml:"Condition,omitempty"`
	Metadata   interface{}       `yaml:"Metadata,omitempty"`
	DependsOn  interface{}       `yaml:"DependsOn,omitempty"`
}

// IAMRole Properties
type IAMRoleProperties struct {
	AssumeRolePolicyDocument interface{} `yaml:"AssumeRolePolicyDocument"`
	MaxSessionDuration       interface{} `yaml:"MaxSessionDuration,omitempty"`
	Path                     interface{} `yaml:"Path,omitempty"`
	RoleName                 interface{} `yaml:"RoleName,omitempty"`
	ManagedPolicyArns        interface{} `yaml:"ManagedPolicyArns,omitempty"`
	Policies                 interface{} `yaml:"Policies,omitempty"`
}

// NewIAMRole constructor creates a new IAMRole
func NewIAMRole(properties IAMRoleProperties, deps ...interface{}) IAMRole {
	return IAMRole{
		Type:       "AWS::IAM::Role",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseIAMRole parses IAMRole
func ParseIAMRole(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource IAMRole
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseIAMRole validator
func (resource IAMRole) Validate() []error {
	return resource.Properties.Validate()
}

// ParseIAMRoleProperties validator
func (resource IAMRoleProperties) Validate() []error {
	errors := []error{}
	if resource.AssumeRolePolicyDocument == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'AssumeRolePolicyDocument'"))
	}
	return errors
}
