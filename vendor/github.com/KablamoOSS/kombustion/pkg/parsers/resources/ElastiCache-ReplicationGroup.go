package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ElastiCacheReplicationGroup Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-replicationgroup.html
type ElastiCacheReplicationGroup struct {
	Type       string                                `yaml:"Type"`
	Properties ElastiCacheReplicationGroupProperties `yaml:"Properties"`
	Condition  interface{}                           `yaml:"Condition,omitempty"`
	Metadata   interface{}                           `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                           `yaml:"DependsOn,omitempty"`
}

// ElastiCacheReplicationGroup Properties
type ElastiCacheReplicationGroupProperties struct {
	AtRestEncryptionEnabled     interface{} `yaml:"AtRestEncryptionEnabled,omitempty"`
	AuthToken                   interface{} `yaml:"AuthToken,omitempty"`
	AutoMinorVersionUpgrade     interface{} `yaml:"AutoMinorVersionUpgrade,omitempty"`
	AutomaticFailoverEnabled    interface{} `yaml:"AutomaticFailoverEnabled,omitempty"`
	CacheNodeType               interface{} `yaml:"CacheNodeType,omitempty"`
	CacheParameterGroupName     interface{} `yaml:"CacheParameterGroupName,omitempty"`
	CacheSubnetGroupName        interface{} `yaml:"CacheSubnetGroupName,omitempty"`
	Engine                      interface{} `yaml:"Engine,omitempty"`
	EngineVersion               interface{} `yaml:"EngineVersion,omitempty"`
	NotificationTopicArn        interface{} `yaml:"NotificationTopicArn,omitempty"`
	NumCacheClusters            interface{} `yaml:"NumCacheClusters,omitempty"`
	NumNodeGroups               interface{} `yaml:"NumNodeGroups,omitempty"`
	Port                        interface{} `yaml:"Port,omitempty"`
	PreferredMaintenanceWindow  interface{} `yaml:"PreferredMaintenanceWindow,omitempty"`
	PrimaryClusterId            interface{} `yaml:"PrimaryClusterId,omitempty"`
	ReplicasPerNodeGroup        interface{} `yaml:"ReplicasPerNodeGroup,omitempty"`
	ReplicationGroupDescription interface{} `yaml:"ReplicationGroupDescription"`
	ReplicationGroupId          interface{} `yaml:"ReplicationGroupId,omitempty"`
	SnapshotName                interface{} `yaml:"SnapshotName,omitempty"`
	SnapshotRetentionLimit      interface{} `yaml:"SnapshotRetentionLimit,omitempty"`
	SnapshotWindow              interface{} `yaml:"SnapshotWindow,omitempty"`
	SnapshottingClusterId       interface{} `yaml:"SnapshottingClusterId,omitempty"`
	TransitEncryptionEnabled    interface{} `yaml:"TransitEncryptionEnabled,omitempty"`
	CacheSecurityGroupNames     interface{} `yaml:"CacheSecurityGroupNames,omitempty"`
	NodeGroupConfiguration      interface{} `yaml:"NodeGroupConfiguration,omitempty"`
	PreferredCacheClusterAZs    interface{} `yaml:"PreferredCacheClusterAZs,omitempty"`
	SecurityGroupIds            interface{} `yaml:"SecurityGroupIds,omitempty"`
	SnapshotArns                interface{} `yaml:"SnapshotArns,omitempty"`
	Tags                        interface{} `yaml:"Tags,omitempty"`
}

// NewElastiCacheReplicationGroup constructor creates a new ElastiCacheReplicationGroup
func NewElastiCacheReplicationGroup(properties ElastiCacheReplicationGroupProperties, deps ...interface{}) ElastiCacheReplicationGroup {
	return ElastiCacheReplicationGroup{
		Type:       "AWS::ElastiCache::ReplicationGroup",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseElastiCacheReplicationGroup parses ElastiCacheReplicationGroup
func ParseElastiCacheReplicationGroup(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ElastiCacheReplicationGroup
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseElastiCacheReplicationGroup validator
func (resource ElastiCacheReplicationGroup) Validate() []error {
	return resource.Properties.Validate()
}

// ParseElastiCacheReplicationGroupProperties validator
func (resource ElastiCacheReplicationGroupProperties) Validate() []error {
	errors := []error{}
	if resource.ReplicationGroupDescription == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ReplicationGroupDescription'"))
	}
	return errors
}
