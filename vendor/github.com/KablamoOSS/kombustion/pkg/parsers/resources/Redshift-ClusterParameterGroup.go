package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// RedshiftClusterParameterGroup Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-clusterparametergroup.html
type RedshiftClusterParameterGroup struct {
	Type       string                                  `yaml:"Type"`
	Properties RedshiftClusterParameterGroupProperties `yaml:"Properties"`
	Condition  interface{}                             `yaml:"Condition,omitempty"`
	Metadata   interface{}                             `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                             `yaml:"DependsOn,omitempty"`
}

// RedshiftClusterParameterGroup Properties
type RedshiftClusterParameterGroupProperties struct {
	Description          interface{} `yaml:"Description"`
	ParameterGroupFamily interface{} `yaml:"ParameterGroupFamily"`
	Parameters           interface{} `yaml:"Parameters,omitempty"`
	Tags                 interface{} `yaml:"Tags,omitempty"`
}

// NewRedshiftClusterParameterGroup constructor creates a new RedshiftClusterParameterGroup
func NewRedshiftClusterParameterGroup(properties RedshiftClusterParameterGroupProperties, deps ...interface{}) RedshiftClusterParameterGroup {
	return RedshiftClusterParameterGroup{
		Type:       "AWS::Redshift::ClusterParameterGroup",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseRedshiftClusterParameterGroup parses RedshiftClusterParameterGroup
func ParseRedshiftClusterParameterGroup(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource RedshiftClusterParameterGroup
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseRedshiftClusterParameterGroup validator
func (resource RedshiftClusterParameterGroup) Validate() []error {
	return resource.Properties.Validate()
}

// ParseRedshiftClusterParameterGroupProperties validator
func (resource RedshiftClusterParameterGroupProperties) Validate() []error {
	errors := []error{}
	if resource.Description == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Description'"))
	}
	if resource.ParameterGroupFamily == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ParameterGroupFamily'"))
	}
	return errors
}
