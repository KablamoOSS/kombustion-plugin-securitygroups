package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// AppSyncDataSource Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html
type AppSyncDataSource struct {
	Type       string                      `yaml:"Type"`
	Properties AppSyncDataSourceProperties `yaml:"Properties"`
	Condition  interface{}                 `yaml:"Condition,omitempty"`
	Metadata   interface{}                 `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                 `yaml:"DependsOn,omitempty"`
}

// AppSyncDataSource Properties
type AppSyncDataSourceProperties struct {
	ApiId               interface{}                               `yaml:"ApiId"`
	Description         interface{}                               `yaml:"Description,omitempty"`
	Name                interface{}                               `yaml:"Name"`
	ServiceRoleArn      interface{}                               `yaml:"ServiceRoleArn,omitempty"`
	Type                interface{}                               `yaml:"Type"`
	LambdaConfig        *properties.DataSourceLambdaConfig        `yaml:"LambdaConfig,omitempty"`
	HttpConfig          *properties.DataSourceHttpConfig          `yaml:"HttpConfig,omitempty"`
	ElasticsearchConfig *properties.DataSourceElasticsearchConfig `yaml:"ElasticsearchConfig,omitempty"`
	DynamoDBConfig      *properties.DataSourceDynamoDBConfig      `yaml:"DynamoDBConfig,omitempty"`
}

// NewAppSyncDataSource constructor creates a new AppSyncDataSource
func NewAppSyncDataSource(properties AppSyncDataSourceProperties, deps ...interface{}) AppSyncDataSource {
	return AppSyncDataSource{
		Type:       "AWS::AppSync::DataSource",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseAppSyncDataSource parses AppSyncDataSource
func ParseAppSyncDataSource(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource AppSyncDataSource
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseAppSyncDataSource validator
func (resource AppSyncDataSource) Validate() []error {
	return resource.Properties.Validate()
}

// ParseAppSyncDataSourceProperties validator
func (resource AppSyncDataSourceProperties) Validate() []error {
	errors := []error{}
	if resource.ApiId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ApiId'"))
	}
	if resource.Name == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Name'"))
	}
	if resource.Type == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Type'"))
	}
	return errors
}
