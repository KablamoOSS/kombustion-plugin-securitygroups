package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ElasticBeanstalkApplicationVersion Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-version.html
type ElasticBeanstalkApplicationVersion struct {
	Type       string                                       `yaml:"Type"`
	Properties ElasticBeanstalkApplicationVersionProperties `yaml:"Properties"`
	Condition  interface{}                                  `yaml:"Condition,omitempty"`
	Metadata   interface{}                                  `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                                  `yaml:"DependsOn,omitempty"`
}

// ElasticBeanstalkApplicationVersion Properties
type ElasticBeanstalkApplicationVersionProperties struct {
	ApplicationName interface{}                                `yaml:"ApplicationName"`
	Description     interface{}                                `yaml:"Description,omitempty"`
	SourceBundle    *properties.ApplicationVersionSourceBundle `yaml:"SourceBundle"`
}

// NewElasticBeanstalkApplicationVersion constructor creates a new ElasticBeanstalkApplicationVersion
func NewElasticBeanstalkApplicationVersion(properties ElasticBeanstalkApplicationVersionProperties, deps ...interface{}) ElasticBeanstalkApplicationVersion {
	return ElasticBeanstalkApplicationVersion{
		Type:       "AWS::ElasticBeanstalk::ApplicationVersion",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseElasticBeanstalkApplicationVersion parses ElasticBeanstalkApplicationVersion
func ParseElasticBeanstalkApplicationVersion(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ElasticBeanstalkApplicationVersion
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseElasticBeanstalkApplicationVersion validator
func (resource ElasticBeanstalkApplicationVersion) Validate() []error {
	return resource.Properties.Validate()
}

// ParseElasticBeanstalkApplicationVersionProperties validator
func (resource ElasticBeanstalkApplicationVersionProperties) Validate() []error {
	errors := []error{}
	if resource.ApplicationName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ApplicationName'"))
	}
	if resource.SourceBundle == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'SourceBundle'"))
	} else {
		errors = append(errors, resource.SourceBundle.Validate()...)
	}
	return errors
}
