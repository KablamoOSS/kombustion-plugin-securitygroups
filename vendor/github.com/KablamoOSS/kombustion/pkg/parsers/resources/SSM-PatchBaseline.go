package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// SSMPatchBaseline Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-patchbaseline.html
type SSMPatchBaseline struct {
	Type       string                     `yaml:"Type"`
	Properties SSMPatchBaselineProperties `yaml:"Properties"`
	Condition  interface{}                `yaml:"Condition,omitempty"`
	Metadata   interface{}                `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                `yaml:"DependsOn,omitempty"`
}

// SSMPatchBaseline Properties
type SSMPatchBaselineProperties struct {
	ApprovedPatchesComplianceLevel   interface{}                               `yaml:"ApprovedPatchesComplianceLevel,omitempty"`
	ApprovedPatchesEnableNonSecurity interface{}                               `yaml:"ApprovedPatchesEnableNonSecurity,omitempty"`
	Description                      interface{}                               `yaml:"Description,omitempty"`
	Name                             interface{}                               `yaml:"Name"`
	OperatingSystem                  interface{}                               `yaml:"OperatingSystem,omitempty"`
	ApprovalRules                    *properties.PatchBaselineRuleGroup        `yaml:"ApprovalRules,omitempty"`
	GlobalFilters                    *properties.PatchBaselinePatchFilterGroup `yaml:"GlobalFilters,omitempty"`
	ApprovedPatches                  interface{}                               `yaml:"ApprovedPatches,omitempty"`
	PatchGroups                      interface{}                               `yaml:"PatchGroups,omitempty"`
	RejectedPatches                  interface{}                               `yaml:"RejectedPatches,omitempty"`
	Sources                          interface{}                               `yaml:"Sources,omitempty"`
}

// NewSSMPatchBaseline constructor creates a new SSMPatchBaseline
func NewSSMPatchBaseline(properties SSMPatchBaselineProperties, deps ...interface{}) SSMPatchBaseline {
	return SSMPatchBaseline{
		Type:       "AWS::SSM::PatchBaseline",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseSSMPatchBaseline parses SSMPatchBaseline
func ParseSSMPatchBaseline(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource SSMPatchBaseline
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseSSMPatchBaseline validator
func (resource SSMPatchBaseline) Validate() []error {
	return resource.Properties.Validate()
}

// ParseSSMPatchBaselineProperties validator
func (resource SSMPatchBaselineProperties) Validate() []error {
	errors := []error{}
	if resource.Name == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Name'"))
	}
	return errors
}
