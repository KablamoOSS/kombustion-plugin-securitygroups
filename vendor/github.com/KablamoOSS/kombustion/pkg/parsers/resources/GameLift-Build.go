package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// GameLiftBuild Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-build.html
type GameLiftBuild struct {
	Type       string                  `yaml:"Type"`
	Properties GameLiftBuildProperties `yaml:"Properties"`
	Condition  interface{}             `yaml:"Condition,omitempty"`
	Metadata   interface{}             `yaml:"Metadata,omitempty"`
	DependsOn  interface{}             `yaml:"DependsOn,omitempty"`
}

// GameLiftBuild Properties
type GameLiftBuildProperties struct {
	Name            interface{}                 `yaml:"Name,omitempty"`
	Version         interface{}                 `yaml:"Version,omitempty"`
	StorageLocation *properties.BuildS3Location `yaml:"StorageLocation,omitempty"`
}

// NewGameLiftBuild constructor creates a new GameLiftBuild
func NewGameLiftBuild(properties GameLiftBuildProperties, deps ...interface{}) GameLiftBuild {
	return GameLiftBuild{
		Type:       "AWS::GameLift::Build",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGameLiftBuild parses GameLiftBuild
func ParseGameLiftBuild(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource GameLiftBuild
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseGameLiftBuild validator
func (resource GameLiftBuild) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGameLiftBuildProperties validator
func (resource GameLiftBuildProperties) Validate() []error {
	errors := []error{}
	return errors
}
