package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// CodeDeployDeploymentConfig Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-deploymentconfig.html
type CodeDeployDeploymentConfig struct {
	Type       string                               `yaml:"Type"`
	Properties CodeDeployDeploymentConfigProperties `yaml:"Properties"`
	Condition  interface{}                          `yaml:"Condition,omitempty"`
	Metadata   interface{}                          `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                          `yaml:"DependsOn,omitempty"`
}

// CodeDeployDeploymentConfig Properties
type CodeDeployDeploymentConfigProperties struct {
	DeploymentConfigName interface{}                                     `yaml:"DeploymentConfigName,omitempty"`
	MinimumHealthyHosts  *properties.DeploymentConfigMinimumHealthyHosts `yaml:"MinimumHealthyHosts,omitempty"`
}

// NewCodeDeployDeploymentConfig constructor creates a new CodeDeployDeploymentConfig
func NewCodeDeployDeploymentConfig(properties CodeDeployDeploymentConfigProperties, deps ...interface{}) CodeDeployDeploymentConfig {
	return CodeDeployDeploymentConfig{
		Type:       "AWS::CodeDeploy::DeploymentConfig",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseCodeDeployDeploymentConfig parses CodeDeployDeploymentConfig
func ParseCodeDeployDeploymentConfig(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource CodeDeployDeploymentConfig
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseCodeDeployDeploymentConfig validator
func (resource CodeDeployDeploymentConfig) Validate() []error {
	return resource.Properties.Validate()
}

// ParseCodeDeployDeploymentConfigProperties validator
func (resource CodeDeployDeploymentConfigProperties) Validate() []error {
	errors := []error{}
	return errors
}
