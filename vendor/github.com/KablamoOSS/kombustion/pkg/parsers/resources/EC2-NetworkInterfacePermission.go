package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// EC2NetworkInterfacePermission Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterfacepermission.html
type EC2NetworkInterfacePermission struct {
	Type       string                                  `yaml:"Type"`
	Properties EC2NetworkInterfacePermissionProperties `yaml:"Properties"`
	Condition  interface{}                             `yaml:"Condition,omitempty"`
	Metadata   interface{}                             `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                             `yaml:"DependsOn,omitempty"`
}

// EC2NetworkInterfacePermission Properties
type EC2NetworkInterfacePermissionProperties struct {
	AwsAccountId       interface{} `yaml:"AwsAccountId"`
	NetworkInterfaceId interface{} `yaml:"NetworkInterfaceId"`
	Permission         interface{} `yaml:"Permission"`
}

// NewEC2NetworkInterfacePermission constructor creates a new EC2NetworkInterfacePermission
func NewEC2NetworkInterfacePermission(properties EC2NetworkInterfacePermissionProperties, deps ...interface{}) EC2NetworkInterfacePermission {
	return EC2NetworkInterfacePermission{
		Type:       "AWS::EC2::NetworkInterfacePermission",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEC2NetworkInterfacePermission parses EC2NetworkInterfacePermission
func ParseEC2NetworkInterfacePermission(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource EC2NetworkInterfacePermission
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseEC2NetworkInterfacePermission validator
func (resource EC2NetworkInterfacePermission) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEC2NetworkInterfacePermissionProperties validator
func (resource EC2NetworkInterfacePermissionProperties) Validate() []error {
	errors := []error{}
	if resource.AwsAccountId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'AwsAccountId'"))
	}
	if resource.NetworkInterfaceId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'NetworkInterfaceId'"))
	}
	if resource.Permission == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Permission'"))
	}
	return errors
}
