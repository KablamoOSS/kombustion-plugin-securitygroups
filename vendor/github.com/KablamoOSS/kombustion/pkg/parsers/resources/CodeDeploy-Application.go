package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// CodeDeployApplication Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-application.html
type CodeDeployApplication struct {
	Type       string                          `yaml:"Type"`
	Properties CodeDeployApplicationProperties `yaml:"Properties"`
	Condition  interface{}                     `yaml:"Condition,omitempty"`
	Metadata   interface{}                     `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                     `yaml:"DependsOn,omitempty"`
}

// CodeDeployApplication Properties
type CodeDeployApplicationProperties struct {
	ApplicationName interface{} `yaml:"ApplicationName,omitempty"`
	ComputePlatform interface{} `yaml:"ComputePlatform,omitempty"`
}

// NewCodeDeployApplication constructor creates a new CodeDeployApplication
func NewCodeDeployApplication(properties CodeDeployApplicationProperties, deps ...interface{}) CodeDeployApplication {
	return CodeDeployApplication{
		Type:       "AWS::CodeDeploy::Application",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseCodeDeployApplication parses CodeDeployApplication
func ParseCodeDeployApplication(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource CodeDeployApplication
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseCodeDeployApplication validator
func (resource CodeDeployApplication) Validate() []error {
	return resource.Properties.Validate()
}

// ParseCodeDeployApplicationProperties validator
func (resource CodeDeployApplicationProperties) Validate() []error {
	errors := []error{}
	return errors
}
