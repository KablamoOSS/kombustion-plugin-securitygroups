package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// IAMManagedPolicy Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html
type IAMManagedPolicy struct {
	Type       string                     `yaml:"Type"`
	Properties IAMManagedPolicyProperties `yaml:"Properties"`
	Condition  interface{}                `yaml:"Condition,omitempty"`
	Metadata   interface{}                `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                `yaml:"DependsOn,omitempty"`
}

// IAMManagedPolicy Properties
type IAMManagedPolicyProperties struct {
	Description       interface{} `yaml:"Description,omitempty"`
	ManagedPolicyName interface{} `yaml:"ManagedPolicyName,omitempty"`
	Path              interface{} `yaml:"Path,omitempty"`
	PolicyDocument    interface{} `yaml:"PolicyDocument"`
	Groups            interface{} `yaml:"Groups,omitempty"`
	Roles             interface{} `yaml:"Roles,omitempty"`
	Users             interface{} `yaml:"Users,omitempty"`
}

// NewIAMManagedPolicy constructor creates a new IAMManagedPolicy
func NewIAMManagedPolicy(properties IAMManagedPolicyProperties, deps ...interface{}) IAMManagedPolicy {
	return IAMManagedPolicy{
		Type:       "AWS::IAM::ManagedPolicy",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseIAMManagedPolicy parses IAMManagedPolicy
func ParseIAMManagedPolicy(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource IAMManagedPolicy
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseIAMManagedPolicy validator
func (resource IAMManagedPolicy) Validate() []error {
	return resource.Properties.Validate()
}

// ParseIAMManagedPolicyProperties validator
func (resource IAMManagedPolicyProperties) Validate() []error {
	errors := []error{}
	if resource.PolicyDocument == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'PolicyDocument'"))
	}
	return errors
}
