package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// EC2VPCEndpointService Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservice.html
type EC2VPCEndpointService struct {
	Type       string                          `yaml:"Type"`
	Properties EC2VPCEndpointServiceProperties `yaml:"Properties"`
	Condition  interface{}                     `yaml:"Condition,omitempty"`
	Metadata   interface{}                     `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                     `yaml:"DependsOn,omitempty"`
}

// EC2VPCEndpointService Properties
type EC2VPCEndpointServiceProperties struct {
	AcceptanceRequired      interface{} `yaml:"AcceptanceRequired,omitempty"`
	NetworkLoadBalancerArns interface{} `yaml:"NetworkLoadBalancerArns"`
}

// NewEC2VPCEndpointService constructor creates a new EC2VPCEndpointService
func NewEC2VPCEndpointService(properties EC2VPCEndpointServiceProperties, deps ...interface{}) EC2VPCEndpointService {
	return EC2VPCEndpointService{
		Type:       "AWS::EC2::VPCEndpointService",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEC2VPCEndpointService parses EC2VPCEndpointService
func ParseEC2VPCEndpointService(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource EC2VPCEndpointService
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseEC2VPCEndpointService validator
func (resource EC2VPCEndpointService) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEC2VPCEndpointServiceProperties validator
func (resource EC2VPCEndpointServiceProperties) Validate() []error {
	errors := []error{}
	if resource.NetworkLoadBalancerArns == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'NetworkLoadBalancerArns'"))
	}
	return errors
}
