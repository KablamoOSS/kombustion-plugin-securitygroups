package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// IAMUser Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html
type IAMUser struct {
	Type       string            `yaml:"Type"`
	Properties IAMUserProperties `yaml:"Properties"`
	Condition  interface{}       `yaml:"Condition,omitempty"`
	Metadata   interface{}       `yaml:"Metadata,omitempty"`
	DependsOn  interface{}       `yaml:"DependsOn,omitempty"`
}

// IAMUser Properties
type IAMUserProperties struct {
	Path              interface{}                  `yaml:"Path,omitempty"`
	UserName          interface{}                  `yaml:"UserName,omitempty"`
	LoginProfile      *properties.UserLoginProfile `yaml:"LoginProfile,omitempty"`
	Groups            interface{}                  `yaml:"Groups,omitempty"`
	ManagedPolicyArns interface{}                  `yaml:"ManagedPolicyArns,omitempty"`
	Policies          interface{}                  `yaml:"Policies,omitempty"`
}

// NewIAMUser constructor creates a new IAMUser
func NewIAMUser(properties IAMUserProperties, deps ...interface{}) IAMUser {
	return IAMUser{
		Type:       "AWS::IAM::User",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseIAMUser parses IAMUser
func ParseIAMUser(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource IAMUser
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseIAMUser validator
func (resource IAMUser) Validate() []error {
	return resource.Properties.Validate()
}

// ParseIAMUserProperties validator
func (resource IAMUserProperties) Validate() []error {
	errors := []error{}
	return errors
}
