package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// GameLiftFleet Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-fleet.html
type GameLiftFleet struct {
	Type       string                  `yaml:"Type"`
	Properties GameLiftFleetProperties `yaml:"Properties"`
	Condition  interface{}             `yaml:"Condition,omitempty"`
	Metadata   interface{}             `yaml:"Metadata,omitempty"`
	DependsOn  interface{}             `yaml:"DependsOn,omitempty"`
}

// GameLiftFleet Properties
type GameLiftFleetProperties struct {
	BuildId                interface{} `yaml:"BuildId"`
	Description            interface{} `yaml:"Description,omitempty"`
	DesiredEC2Instances    interface{} `yaml:"DesiredEC2Instances"`
	EC2InstanceType        interface{} `yaml:"EC2InstanceType"`
	MaxSize                interface{} `yaml:"MaxSize,omitempty"`
	MinSize                interface{} `yaml:"MinSize,omitempty"`
	Name                   interface{} `yaml:"Name"`
	ServerLaunchParameters interface{} `yaml:"ServerLaunchParameters,omitempty"`
	ServerLaunchPath       interface{} `yaml:"ServerLaunchPath"`
	EC2InboundPermissions  interface{} `yaml:"EC2InboundPermissions,omitempty"`
	LogPaths               interface{} `yaml:"LogPaths,omitempty"`
}

// NewGameLiftFleet constructor creates a new GameLiftFleet
func NewGameLiftFleet(properties GameLiftFleetProperties, deps ...interface{}) GameLiftFleet {
	return GameLiftFleet{
		Type:       "AWS::GameLift::Fleet",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGameLiftFleet parses GameLiftFleet
func ParseGameLiftFleet(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource GameLiftFleet
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseGameLiftFleet validator
func (resource GameLiftFleet) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGameLiftFleetProperties validator
func (resource GameLiftFleetProperties) Validate() []error {
	errors := []error{}
	if resource.BuildId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'BuildId'"))
	}
	if resource.DesiredEC2Instances == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DesiredEC2Instances'"))
	}
	if resource.EC2InstanceType == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'EC2InstanceType'"))
	}
	if resource.Name == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Name'"))
	}
	if resource.ServerLaunchPath == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ServerLaunchPath'"))
	}
	return errors
}
