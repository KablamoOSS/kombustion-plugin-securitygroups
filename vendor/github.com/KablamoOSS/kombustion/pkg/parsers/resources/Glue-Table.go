package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// GlueTable Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-table.html
type GlueTable struct {
	Type       string              `yaml:"Type"`
	Properties GlueTableProperties `yaml:"Properties"`
	Condition  interface{}         `yaml:"Condition,omitempty"`
	Metadata   interface{}         `yaml:"Metadata,omitempty"`
	DependsOn  interface{}         `yaml:"DependsOn,omitempty"`
}

// GlueTable Properties
type GlueTableProperties struct {
	CatalogId    interface{}                 `yaml:"CatalogId"`
	DatabaseName interface{}                 `yaml:"DatabaseName"`
	TableInput   *properties.TableTableInput `yaml:"TableInput"`
}

// NewGlueTable constructor creates a new GlueTable
func NewGlueTable(properties GlueTableProperties, deps ...interface{}) GlueTable {
	return GlueTable{
		Type:       "AWS::Glue::Table",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGlueTable parses GlueTable
func ParseGlueTable(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource GlueTable
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseGlueTable validator
func (resource GlueTable) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGlueTableProperties validator
func (resource GlueTableProperties) Validate() []error {
	errors := []error{}
	if resource.CatalogId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'CatalogId'"))
	}
	if resource.DatabaseName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DatabaseName'"))
	}
	if resource.TableInput == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'TableInput'"))
	} else {
		errors = append(errors, resource.TableInput.Validate()...)
	}
	return errors
}
