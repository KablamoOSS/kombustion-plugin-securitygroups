package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// EC2Host Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-host.html
type EC2Host struct {
	Type       string            `yaml:"Type"`
	Properties EC2HostProperties `yaml:"Properties"`
	Condition  interface{}       `yaml:"Condition,omitempty"`
	Metadata   interface{}       `yaml:"Metadata,omitempty"`
	DependsOn  interface{}       `yaml:"DependsOn,omitempty"`
}

// EC2Host Properties
type EC2HostProperties struct {
	AutoPlacement    interface{} `yaml:"AutoPlacement,omitempty"`
	AvailabilityZone interface{} `yaml:"AvailabilityZone"`
	InstanceType     interface{} `yaml:"InstanceType"`
}

// NewEC2Host constructor creates a new EC2Host
func NewEC2Host(properties EC2HostProperties, deps ...interface{}) EC2Host {
	return EC2Host{
		Type:       "AWS::EC2::Host",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEC2Host parses EC2Host
func ParseEC2Host(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource EC2Host
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseEC2Host validator
func (resource EC2Host) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEC2HostProperties validator
func (resource EC2HostProperties) Validate() []error {
	errors := []error{}
	if resource.AvailabilityZone == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'AvailabilityZone'"))
	}
	if resource.InstanceType == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'InstanceType'"))
	}
	return errors
}
