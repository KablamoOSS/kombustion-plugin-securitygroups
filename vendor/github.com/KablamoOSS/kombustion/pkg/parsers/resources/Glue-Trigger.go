package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// GlueTrigger Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-trigger.html
type GlueTrigger struct {
	Type       string                `yaml:"Type"`
	Properties GlueTriggerProperties `yaml:"Properties"`
	Condition  interface{}           `yaml:"Condition,omitempty"`
	Metadata   interface{}           `yaml:"Metadata,omitempty"`
	DependsOn  interface{}           `yaml:"DependsOn,omitempty"`
}

// GlueTrigger Properties
type GlueTriggerProperties struct {
	Description interface{}                  `yaml:"Description,omitempty"`
	Name        interface{}                  `yaml:"Name,omitempty"`
	Schedule    interface{}                  `yaml:"Schedule,omitempty"`
	Type        interface{}                  `yaml:"Type"`
	Predicate   *properties.TriggerPredicate `yaml:"Predicate,omitempty"`
	Actions     interface{}                  `yaml:"Actions"`
}

// NewGlueTrigger constructor creates a new GlueTrigger
func NewGlueTrigger(properties GlueTriggerProperties, deps ...interface{}) GlueTrigger {
	return GlueTrigger{
		Type:       "AWS::Glue::Trigger",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGlueTrigger parses GlueTrigger
func ParseGlueTrigger(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource GlueTrigger
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseGlueTrigger validator
func (resource GlueTrigger) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGlueTriggerProperties validator
func (resource GlueTriggerProperties) Validate() []error {
	errors := []error{}
	if resource.Type == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Type'"))
	}
	if resource.Actions == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Actions'"))
	}
	return errors
}
