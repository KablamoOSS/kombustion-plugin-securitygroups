package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// BatchComputeEnvironment Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html
type BatchComputeEnvironment struct {
	Type       string                            `yaml:"Type"`
	Properties BatchComputeEnvironmentProperties `yaml:"Properties"`
	Condition  interface{}                       `yaml:"Condition,omitempty"`
	Metadata   interface{}                       `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                       `yaml:"DependsOn,omitempty"`
}

// BatchComputeEnvironment Properties
type BatchComputeEnvironmentProperties struct {
	ComputeEnvironmentName interface{}                                    `yaml:"ComputeEnvironmentName,omitempty"`
	ServiceRole            interface{}                                    `yaml:"ServiceRole"`
	State                  interface{}                                    `yaml:"State,omitempty"`
	Type                   interface{}                                    `yaml:"Type"`
	ComputeResources       *properties.ComputeEnvironmentComputeResources `yaml:"ComputeResources,omitempty"`
}

// NewBatchComputeEnvironment constructor creates a new BatchComputeEnvironment
func NewBatchComputeEnvironment(properties BatchComputeEnvironmentProperties, deps ...interface{}) BatchComputeEnvironment {
	return BatchComputeEnvironment{
		Type:       "AWS::Batch::ComputeEnvironment",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseBatchComputeEnvironment parses BatchComputeEnvironment
func ParseBatchComputeEnvironment(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource BatchComputeEnvironment
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseBatchComputeEnvironment validator
func (resource BatchComputeEnvironment) Validate() []error {
	return resource.Properties.Validate()
}

// ParseBatchComputeEnvironmentProperties validator
func (resource BatchComputeEnvironmentProperties) Validate() []error {
	errors := []error{}
	if resource.ServiceRole == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ServiceRole'"))
	}
	if resource.Type == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Type'"))
	}
	return errors
}
