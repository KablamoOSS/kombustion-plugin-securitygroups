package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ApiGatewayUsagePlan Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html
type ApiGatewayUsagePlan struct {
	Type       string                        `yaml:"Type"`
	Properties ApiGatewayUsagePlanProperties `yaml:"Properties"`
	Condition  interface{}                   `yaml:"Condition,omitempty"`
	Metadata   interface{}                   `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                   `yaml:"DependsOn,omitempty"`
}

// ApiGatewayUsagePlan Properties
type ApiGatewayUsagePlanProperties struct {
	Description   interface{}                           `yaml:"Description,omitempty"`
	UsagePlanName interface{}                           `yaml:"UsagePlanName,omitempty"`
	Throttle      *properties.UsagePlanThrottleSettings `yaml:"Throttle,omitempty"`
	Quota         *properties.UsagePlanQuotaSettings    `yaml:"Quota,omitempty"`
	ApiStages     interface{}                           `yaml:"ApiStages,omitempty"`
}

// NewApiGatewayUsagePlan constructor creates a new ApiGatewayUsagePlan
func NewApiGatewayUsagePlan(properties ApiGatewayUsagePlanProperties, deps ...interface{}) ApiGatewayUsagePlan {
	return ApiGatewayUsagePlan{
		Type:       "AWS::ApiGateway::UsagePlan",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseApiGatewayUsagePlan parses ApiGatewayUsagePlan
func ParseApiGatewayUsagePlan(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ApiGatewayUsagePlan
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseApiGatewayUsagePlan validator
func (resource ApiGatewayUsagePlan) Validate() []error {
	return resource.Properties.Validate()
}

// ParseApiGatewayUsagePlanProperties validator
func (resource ApiGatewayUsagePlanProperties) Validate() []error {
	errors := []error{}
	return errors
}
