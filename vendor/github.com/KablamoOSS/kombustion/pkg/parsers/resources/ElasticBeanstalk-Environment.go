package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ElasticBeanstalkEnvironment Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html
type ElasticBeanstalkEnvironment struct {
	Type       string                                `yaml:"Type"`
	Properties ElasticBeanstalkEnvironmentProperties `yaml:"Properties"`
	Condition  interface{}                           `yaml:"Condition,omitempty"`
	Metadata   interface{}                           `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                           `yaml:"DependsOn,omitempty"`
}

// ElasticBeanstalkEnvironment Properties
type ElasticBeanstalkEnvironmentProperties struct {
	ApplicationName   interface{}                 `yaml:"ApplicationName"`
	CNAMEPrefix       interface{}                 `yaml:"CNAMEPrefix,omitempty"`
	Description       interface{}                 `yaml:"Description,omitempty"`
	EnvironmentName   interface{}                 `yaml:"EnvironmentName,omitempty"`
	PlatformArn       interface{}                 `yaml:"PlatformArn,omitempty"`
	SolutionStackName interface{}                 `yaml:"SolutionStackName,omitempty"`
	TemplateName      interface{}                 `yaml:"TemplateName,omitempty"`
	VersionLabel      interface{}                 `yaml:"VersionLabel,omitempty"`
	Tier              *properties.EnvironmentTier `yaml:"Tier,omitempty"`
	OptionSettings    interface{}                 `yaml:"OptionSettings,omitempty"`
	Tags              interface{}                 `yaml:"Tags,omitempty"`
}

// NewElasticBeanstalkEnvironment constructor creates a new ElasticBeanstalkEnvironment
func NewElasticBeanstalkEnvironment(properties ElasticBeanstalkEnvironmentProperties, deps ...interface{}) ElasticBeanstalkEnvironment {
	return ElasticBeanstalkEnvironment{
		Type:       "AWS::ElasticBeanstalk::Environment",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseElasticBeanstalkEnvironment parses ElasticBeanstalkEnvironment
func ParseElasticBeanstalkEnvironment(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ElasticBeanstalkEnvironment
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseElasticBeanstalkEnvironment validator
func (resource ElasticBeanstalkEnvironment) Validate() []error {
	return resource.Properties.Validate()
}

// ParseElasticBeanstalkEnvironmentProperties validator
func (resource ElasticBeanstalkEnvironmentProperties) Validate() []error {
	errors := []error{}
	if resource.ApplicationName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ApplicationName'"))
	}
	return errors
}
