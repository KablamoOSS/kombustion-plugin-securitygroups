package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// LogsDestination Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html
type LogsDestination struct {
	Type       string                    `yaml:"Type"`
	Properties LogsDestinationProperties `yaml:"Properties"`
	Condition  interface{}               `yaml:"Condition,omitempty"`
	Metadata   interface{}               `yaml:"Metadata,omitempty"`
	DependsOn  interface{}               `yaml:"DependsOn,omitempty"`
}

// LogsDestination Properties
type LogsDestinationProperties struct {
	DestinationName   interface{} `yaml:"DestinationName"`
	DestinationPolicy interface{} `yaml:"DestinationPolicy"`
	RoleArn           interface{} `yaml:"RoleArn"`
	TargetArn         interface{} `yaml:"TargetArn"`
}

// NewLogsDestination constructor creates a new LogsDestination
func NewLogsDestination(properties LogsDestinationProperties, deps ...interface{}) LogsDestination {
	return LogsDestination{
		Type:       "AWS::Logs::Destination",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseLogsDestination parses LogsDestination
func ParseLogsDestination(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource LogsDestination
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseLogsDestination validator
func (resource LogsDestination) Validate() []error {
	return resource.Properties.Validate()
}

// ParseLogsDestinationProperties validator
func (resource LogsDestinationProperties) Validate() []error {
	errors := []error{}
	if resource.DestinationName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DestinationName'"))
	}
	if resource.DestinationPolicy == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DestinationPolicy'"))
	}
	if resource.RoleArn == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'RoleArn'"))
	}
	if resource.TargetArn == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'TargetArn'"))
	}
	return errors
}
