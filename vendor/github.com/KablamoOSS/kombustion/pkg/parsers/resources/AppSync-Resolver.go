package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// AppSyncResolver Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html
type AppSyncResolver struct {
	Type       string                    `yaml:"Type"`
	Properties AppSyncResolverProperties `yaml:"Properties"`
	Condition  interface{}               `yaml:"Condition,omitempty"`
	Metadata   interface{}               `yaml:"Metadata,omitempty"`
	DependsOn  interface{}               `yaml:"DependsOn,omitempty"`
}

// AppSyncResolver Properties
type AppSyncResolverProperties struct {
	ApiId                             interface{} `yaml:"ApiId"`
	DataSourceName                    interface{} `yaml:"DataSourceName"`
	FieldName                         interface{} `yaml:"FieldName"`
	RequestMappingTemplate            interface{} `yaml:"RequestMappingTemplate,omitempty"`
	RequestMappingTemplateS3Location  interface{} `yaml:"RequestMappingTemplateS3Location,omitempty"`
	ResponseMappingTemplate           interface{} `yaml:"ResponseMappingTemplate,omitempty"`
	ResponseMappingTemplateS3Location interface{} `yaml:"ResponseMappingTemplateS3Location,omitempty"`
	TypeName                          interface{} `yaml:"TypeName"`
}

// NewAppSyncResolver constructor creates a new AppSyncResolver
func NewAppSyncResolver(properties AppSyncResolverProperties, deps ...interface{}) AppSyncResolver {
	return AppSyncResolver{
		Type:       "AWS::AppSync::Resolver",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseAppSyncResolver parses AppSyncResolver
func ParseAppSyncResolver(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource AppSyncResolver
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseAppSyncResolver validator
func (resource AppSyncResolver) Validate() []error {
	return resource.Properties.Validate()
}

// ParseAppSyncResolverProperties validator
func (resource AppSyncResolverProperties) Validate() []error {
	errors := []error{}
	if resource.ApiId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'ApiId'"))
	}
	if resource.DataSourceName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DataSourceName'"))
	}
	if resource.FieldName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'FieldName'"))
	}
	if resource.TypeName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'TypeName'"))
	}
	return errors
}
