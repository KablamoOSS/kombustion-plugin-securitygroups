package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ConfigConfigRule Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-configrule.html
type ConfigConfigRule struct {
	Type       string                     `yaml:"Type"`
	Properties ConfigConfigRuleProperties `yaml:"Properties"`
	Condition  interface{}                `yaml:"Condition,omitempty"`
	Metadata   interface{}                `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                `yaml:"DependsOn,omitempty"`
}

// ConfigConfigRule Properties
type ConfigConfigRuleProperties struct {
	ConfigRuleName            interface{}                  `yaml:"ConfigRuleName,omitempty"`
	Description               interface{}                  `yaml:"Description,omitempty"`
	InputParameters           interface{}                  `yaml:"InputParameters,omitempty"`
	MaximumExecutionFrequency interface{}                  `yaml:"MaximumExecutionFrequency,omitempty"`
	Source                    *properties.ConfigRuleSource `yaml:"Source"`
	Scope                     *properties.ConfigRuleScope  `yaml:"Scope,omitempty"`
}

// NewConfigConfigRule constructor creates a new ConfigConfigRule
func NewConfigConfigRule(properties ConfigConfigRuleProperties, deps ...interface{}) ConfigConfigRule {
	return ConfigConfigRule{
		Type:       "AWS::Config::ConfigRule",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseConfigConfigRule parses ConfigConfigRule
func ParseConfigConfigRule(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource ConfigConfigRule
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseConfigConfigRule validator
func (resource ConfigConfigRule) Validate() []error {
	return resource.Properties.Validate()
}

// ParseConfigConfigRuleProperties validator
func (resource ConfigConfigRuleProperties) Validate() []error {
	errors := []error{}
	if resource.Source == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'Source'"))
	} else {
		errors = append(errors, resource.Source.Validate()...)
	}
	return errors
}
