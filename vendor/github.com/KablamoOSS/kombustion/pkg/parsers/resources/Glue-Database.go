package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// GlueDatabase Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-database.html
type GlueDatabase struct {
	Type       string                 `yaml:"Type"`
	Properties GlueDatabaseProperties `yaml:"Properties"`
	Condition  interface{}            `yaml:"Condition,omitempty"`
	Metadata   interface{}            `yaml:"Metadata,omitempty"`
	DependsOn  interface{}            `yaml:"DependsOn,omitempty"`
}

// GlueDatabase Properties
type GlueDatabaseProperties struct {
	CatalogId     interface{}                       `yaml:"CatalogId"`
	DatabaseInput *properties.DatabaseDatabaseInput `yaml:"DatabaseInput"`
}

// NewGlueDatabase constructor creates a new GlueDatabase
func NewGlueDatabase(properties GlueDatabaseProperties, deps ...interface{}) GlueDatabase {
	return GlueDatabase{
		Type:       "AWS::Glue::Database",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGlueDatabase parses GlueDatabase
func ParseGlueDatabase(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource GlueDatabase
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseGlueDatabase validator
func (resource GlueDatabase) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGlueDatabaseProperties validator
func (resource GlueDatabaseProperties) Validate() []error {
	errors := []error{}
	if resource.CatalogId == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'CatalogId'"))
	}
	if resource.DatabaseInput == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DatabaseInput'"))
	} else {
		errors = append(errors, resource.DatabaseInput.Validate()...)
	}
	return errors
}
