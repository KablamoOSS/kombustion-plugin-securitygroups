package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// RDSDBSecurityGroupIngress Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-security-group-ingress.html
type RDSDBSecurityGroupIngress struct {
	Type       string                              `yaml:"Type"`
	Properties RDSDBSecurityGroupIngressProperties `yaml:"Properties"`
	Condition  interface{}                         `yaml:"Condition,omitempty"`
	Metadata   interface{}                         `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                         `yaml:"DependsOn,omitempty"`
}

// RDSDBSecurityGroupIngress Properties
type RDSDBSecurityGroupIngressProperties struct {
	CIDRIP                  interface{} `yaml:"CIDRIP,omitempty"`
	DBSecurityGroupName     interface{} `yaml:"DBSecurityGroupName"`
	EC2SecurityGroupId      interface{} `yaml:"EC2SecurityGroupId,omitempty"`
	EC2SecurityGroupName    interface{} `yaml:"EC2SecurityGroupName,omitempty"`
	EC2SecurityGroupOwnerId interface{} `yaml:"EC2SecurityGroupOwnerId,omitempty"`
}

// NewRDSDBSecurityGroupIngress constructor creates a new RDSDBSecurityGroupIngress
func NewRDSDBSecurityGroupIngress(properties RDSDBSecurityGroupIngressProperties, deps ...interface{}) RDSDBSecurityGroupIngress {
	return RDSDBSecurityGroupIngress{
		Type:       "AWS::RDS::DBSecurityGroupIngress",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseRDSDBSecurityGroupIngress parses RDSDBSecurityGroupIngress
func ParseRDSDBSecurityGroupIngress(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"
	var resource RDSDBSecurityGroupIngress
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	return
}

// ParseRDSDBSecurityGroupIngress validator
func (resource RDSDBSecurityGroupIngress) Validate() []error {
	return resource.Properties.Validate()
}

// ParseRDSDBSecurityGroupIngressProperties validator
func (resource RDSDBSecurityGroupIngressProperties) Validate() []error {
	errors := []error{}
	if resource.DBSecurityGroupName == nil {
		errors = append(errors, fmt.Errorf("Missing required field 'DBSecurityGroupName'"))
	}
	return errors
}
